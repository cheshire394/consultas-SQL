
--Ejercicios Group By
--Tablas Empleados y Departamentos

--Tablas Depart y Emple

CREATE TABLE DEPART (
 DEPT_NO  NUMBER(2) PRIMARY KEY,
 DNOMBRE  VARCHAR2(14), 
 LOC      VARCHAR2(14) ) ;
 
INSERT INTO DEPART VALUES (10,'CONTABILIDAD','SEVILLA');
INSERT INTO DEPART VALUES (20,'INVESTIGACION','MADRID');
INSERT INTO DEPART VALUES (30,'VENTAS','BARCELONA');
INSERT INTO DEPART VALUES (40,'PRODUCCION','BILBAO');
COMMIT;
 
 
REM ******** TABLA EMPLE: *************
 
ALTER SESSION SET NLS_DATE_FORMAT='DD/MM/YYYY';
 
DROP TABLE EMPLE cascade constraints; 
 
CREATE TABLE EMPLE (
 EMP_NO    NUMBER(4) PRIMARY KEY,
 APELLIDO  VARCHAR2(10)  ,
 OFICIO    VARCHAR2(10)  ,
 DIR       NUMBER(4) ,
 FECHA_ALT DATE      ,
 SALARIO   NUMBER(7),
 COMISION  NUMBER(7),
 DEPT_NO   NUMBER(2) NOT NULL,
 FOREIGN KEY (DEPT_NO) REFERENCES DEPART(DEPT_NO)) ;
 
INSERT INTO EMPLE VALUES (7369,'SANCHEZ','EMPLEADO',7902,'17/12/2005',
                        1040,NULL,20);
INSERT INTO EMPLE VALUES (7499,'ARROYO','VENDEDOR',7698,'20/02/2007',
                        1500,390,30);
INSERT INTO EMPLE VALUES (7521,'SALA','VENDEDOR',7698,'22/02/2008',
                        1625,650,30);
INSERT INTO EMPLE VALUES (7566,'JIMENEZ','DIRECTOR',7839,'02/04/2008',
                        2900,NULL,20);
INSERT INTO EMPLE VALUES (7654,'MARTIN','VENDEDOR',7698,'29/09/2008',
                        1600,1020,30);
INSERT INTO EMPLE VALUES (7698,'NEGRO','DIRECTOR',7839,'01/05/2008',
                        3005,NULL,30);
INSERT INTO EMPLE VALUES (7782,'CEREZO','DIRECTOR',7839,'09/06/2005',
                        2885,NULL,10);
INSERT INTO EMPLE VALUES (7788,'GIL','ANALISTA',7566,'09/11/2007',
                        3000,NULL,20);
INSERT INTO EMPLE VALUES (7839,'REY','PRESIDENTE',NULL,'17/11/2007',
                        4100,NULL,10);
INSERT INTO EMPLE VALUES (7844,'TOVAR','VENDEDOR',7698,'08/09/2007',
                        1350,0,30);
INSERT INTO EMPLE VALUES (7876,'ALONSO','EMPLEADO',7788,'23/09/2008',
                        1430,NULL,20);
INSERT INTO EMPLE VALUES (7900,'JIMENO','EMPLEADO',7698,'03/12/2008',
                        1335,NULL,30);
INSERT INTO EMPLE VALUES (7902,'FERNANDEZ','ANALISTA',7566,'03/12/2007',
                        3000,NULL,20);
INSERT INTO EMPLE VALUES (7934,'MUNNOZ','EMPLEADO',7782,'23/01/2009',
                        1690,NULL,10);
 
COMMIT;

--1. Mostrar por cada oficio cuantos empleados tiene, cuál es el mejor salario, la suma total de los salarios y cuantos empleados tienen comisión.

SELECT COUNT(EMP_NO) AS NUMERO_EMPLEADOS, MAX(SALARIO) AS MAYOR_SALARIO, SUM(SALARIO) SALARIOS_DEPARTAMENTO, COUNT(COMISION) AS EMPLE_COMISION
FROM EMPLE
GROUP BY DEPT_NO;


--2. Mostrar el codigo y nombre del departamento de los departamentos que cuya suma de salarios supera los 9000€ .

SELECT DEPART.DEPT_NO, DEPART.DNOMBRE, SUM(SALARIO) AS SUMA_SALARIOS
FROM DEPART 
JOIN  EMPLE ON EMPLE.DEPT_NO = DEPART.DEPT_NO
GROUP BY DEPART.DEPT_NO, DEPART.DNOMBRE HAVING SUM(EMPLE.SALARIO) > 9000;


--3. Mostrar la media del salario de los departamentos que tienen más de 3 empleados sin tener en cuenta ni a los presidentes ni a los directores.

--hay que saber diferenciar sin es un where o un having teniedo en cuanta si es una condición de agrupamiento o una condicion de fila.
--esta consulta no te salia porque estabas tratando de meterlo tood en la misa fila del having.
SELECT AVG(SALARIO) "PROMEDIO SALARIO", DEPT_NO 
FROM EMPLE
WHERE UPPER(OFICIO) NOT IN ('PRESIDENTE', 'DIRECTOR')
GROUP BY DEPT_NO HAVING COUNT(*) > 3;

--4. Mostrar por cada mes y año cuantos empleados han entrado a la empresa


SELECT COUNT(EMP_NO) "NUMERO EMPLEADOS", TO_CHAR(FECHA_ALT, 'MM/YYYY')  "FECHA ALTA"
FROM EMPLE
GROUP BY TO_CHAR(FECHA_ALT, 'MM/YYYY');


--5. Mostrar el año en el que han entrado más empleados
--DIFICIL NO TE SALIA
SELECT TO_CHAR(FECHA_ALT, 'YYYY') AS "MAS CONTRATADOS"
FROM EMPLE
GROUP BY TO_CHAR(FECHA_ALT, 'YYYY') HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM EMPLE GROUP BY TO_CHAR(FECHA_ALT, 'YYYY');


--6. Mostrar el año en el que han entrado más empleados sin contar con los directores.

--Tablas Alumnos, Asignaturas, Notas

DROP TABLE ALUMNOS cascade constraints;
 
CREATE TABLE ALUMNOS
(
  DNI VARCHAR2(10) PRIMARY KEY,
  APENOM VARCHAR2(30),
  DIREC VARCHAR2(30),
  POBLA  VARCHAR2(15),
  TELEF  VARCHAR2(10)  
) ;
 
DROP TABLE ASIGNATURAS cascade constraints;
 
CREATE TABLE ASIGNATURAS
(
  COD NUMBER(2) PRIMARY KEY,
  NOMBRE VARCHAR2(25)
) ;
 
DROP TABLE NOTAS cascade constraints;
 
CREATE TABLE NOTAS
(
  DNI VARCHAR2(10) NOT NULL,
  COD NUMBER(2) NOT NULL,
  NOTA NUMBER(2),
  PRIMARY KEY(DNI,COD),
  FOREIGN KEY (DNI) REFERENCES ALUMNOS(DNI),
  FOREIGN KEY (COD) REFERENCES ASIGNATURAS(COD)
) ;
 
INSERT INTO ASIGNATURAS VALUES (1,'Programacion');
INSERT INTO ASIGNATURAS VALUES (2,'BBDD');
INSERT INTO ASIGNATURAS VALUES (3,'Marcas');
INSERT INTO ASIGNATURAS VALUES (4,'Sistemas');
 
 
 
INSERT INTO ALUMNOS VALUES
('12344345','Alcalde Garcia, Elena', 'C/Las Matas, 24','Madrid','917766545');
 
INSERT INTO ALUMNOS VALUES
('4448242','Cerrato Vela, Luis', 'C/Mina 28 - 3A', 'Madrid','916566545');
 
INSERT INTO ALUMNOS VALUES
('56882942','Diaz Fernandez, Maria', 'C/Luis Vives 25', 'Mostoles','915577545');
 
INSERT INTO ALUMNOS VALUES
('2112212','Sanz Martin, Roberto', 'C/Espronceda 89', 'Madrid','914431211');
 
INSERT INTO NOTAS VALUES('12344345', 1,6);
INSERT INTO NOTAS VALUES('12344345', 2,5);
INSERT INTO NOTAS VALUES('12344345', 3,6);
INSERT INTO NOTAS VALUES('12344345', 4,6);
 
INSERT INTO NOTAS VALUES('4448242', 1,6);
INSERT INTO NOTAS VALUES('4448242', 2,8);
INSERT INTO NOTAS VALUES('4448242', 3,4);
INSERT INTO NOTAS VALUES('4448242', 4,5);
 
INSERT INTO NOTAS VALUES('56882942', 1,8);
INSERT INTO NOTAS VALUES('56882942', 2,7);
INSERT INTO NOTAS VALUES('56882942', 3,8);
INSERT INTO NOTAS VALUES('56882942', 4,9);
 
INSERT INTO NOTAS VALUES('2112212', 1,3);
INSERT INTO NOTAS VALUES('2112212', 2,3);
INSERT INTO NOTAS VALUES('2112212', 3,2);
INSERT INTO NOTAS VALUES('2112212', 4,6);
COMMIT;
 
REM ******** FIN ***********************
--7. Mostrar la mejor y peor nota en cada una de las asignaturas junto al nombre de la asignatura.

SELECT MAX(N.NOTA) "MEJOR NOTA", MIN(N.NOTA) "PEOR NOTA", ASI.NOMBRE
FROM NOTAS N
JOIN ASIGNATURAS ASI ON N.COD = ASI.COD
GROUP BY N.COD;--falla porque has usado cod, en vez de lo que hay en el select

--RESULTADOS CORRECTOS
SELECT MAX(N.NOTA) "MEJOR NOTA", MIN(N.NOTA) "PEOR NOTA", ASI.NOMBRE
FROM NOTAS N
JOIN ASIGNATURAS ASI ON ASI.COD = N.COD
GROUP BY ASI.NOMBRE;

--8 ASIGNATURAS QUE TIENEN MAS DE UN ALUMNO SUSPENSO
--resultados correctos
SELECT ASI.NOMBRE, ASI.COD
FROM ASIGNATURAS ASI
JOIN NOTAS N ON N.COD = ASI.COD
WHERE N.NOTA < 5
GROUP BY ASI.NOMBRE, ASI.COD HAVING COUNT(*) > 1;

--9. Mostrar para cada alumno su nombre junto a la media de sus notas pero solo para alumnos que esta media sea al menos de 6
--RESULTADOS CORRECTOS
SELECT A.DNI, A. APENOM, AVG(NOTA) AS MEDIA_NOTAS
FROM ALUMNOS A
JOIN NOTAS N ON N.DNI = A.DNI
GROUP BY N.COD HAVING AVG(N.NOTA) >= 6;
-- CORRECCIÓN CHAT GPT:

SELECT A.DNI, A.APENOM, AVG(N.NOTA) AS MEDIA_NOTAS
FROM ALUMNOS A
JOIN NOTAS N ON N.DNI = A.DNI
GROUP BY A.DNI, A.APENOM, N.COD HAVING AVG(N.NOTA) >= 6; --mismo fallo, no coges lo que hay en el select



--10.Mostrar el código y el nombre de la asignatura en la que se han obtenido más suspensos

--CONSULTA NO COMPILA
SELECT ASI.COD,ASI.NOMBRE
FROM ASIGNATURAS ASI 
JOIN NOTAS N ON N.COD = ASI.COD
GROUP BY ASI.COD, ASI.NOMBRE



--11.Mostrar el nombre de los alumnos que han obtenido más de un ocho. 

--CONSULTA DIFICIL, TE AYUDA GPT
--RESULTADOS COMPROBADOS
SELECT DISTINCT A.APENOM, A.DNI
FROM ALUMNOS A
JOIN NOTAS N ON N.DNI = A.DNI
WHERE N.NOTA > 8
GROUP BY A.APENOM, A.DNI;



12. Mostrar por cada alumno cuantos aprobados y cuantos suspensos tiene.

--NO SUPE RESOLVER, ME AYUDO CHAT, NO COMPILA

SELECT A.APENOM, A.DNI 
       COUNT(CASE WHEN N.NOTA >= 5 THEN 1 END) AS APROBADAS, 
       COUNT(CASE WHEN N2.NOTA < 5 THEN 1 END) AS SUSPENSOS
FROM ALUMNOS A
JOIN NOTAS N ON N.DNI = A.DNI--JOIN PARA APROBADOS
JOIN NOTAS N2 ON N2.DNI = A.DNI --JOIN PARA SUSPENSOS
JOIN ASIGNATURAS ASI = ASI.COD = N.COD
GROUP BY ASI.COD;

SELECT A.DNI, 
       A.APENOM, 
       COUNT(N.NOTA >= 5) AS APROBADAS, 
       COUNT(N2.NOTA < 5) AS SUSPENSOS
FROM ALUMNOS A
JOIN NOTAS N ON N.DNI = A.DNI
JOIN NOTAS N2 ON N2.DNI = A.DNI
GROUP BY A.DNI, A.APENOM;



