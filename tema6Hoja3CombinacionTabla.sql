



--Tema 5 – Lenguaje de consulta de datos Ejercicios COMBINACION DE TABLAS


--Tablas Depart y Emple

CREATE TABLE DEPART (
 DEPT_NO  NUMBER(2) PRIMARY KEY,
 DNOMBRE  VARCHAR2(14), 
 LOC      VARCHAR2(14) ) ;
 
INSERT INTO DEPART VALUES (10,'CONTABILIDAD','SEVILLA');
INSERT INTO DEPART VALUES (20,'INVESTIGACION','MADRID');
INSERT INTO DEPART VALUES (30,'VENTAS','BARCELONA');
INSERT INTO DEPART VALUES (40,'PRODUCCION','BILBAO');
COMMIT;
 
 
REM ******** TABLA EMPLE: *************
 
ALTER SESSION SET NLS_DATE_FORMAT='DD/MM/YYYY';
 
DROP TABLE EMPLE cascade constraints; 
 
CREATE TABLE EMPLE (
 EMP_NO    NUMBER(4) PRIMARY KEY,
 APELLIDO  VARCHAR2(10)  ,
 OFICIO    VARCHAR2(10)  ,
 DIR       NUMBER(4) ,
 FECHA_ALT DATE      ,
 SALARIO   NUMBER(7),
 COMISION  NUMBER(7),
 DEPT_NO   NUMBER(2) NOT NULL,
 FOREIGN KEY (DEPT_NO) REFERENCES DEPART(DEPT_NO)) ;
 
INSERT INTO EMPLE VALUES (7369,'SANCHEZ','EMPLEADO',7902,'17/12/2005',
                        1040,NULL,20);
INSERT INTO EMPLE VALUES (7499,'ARROYO','VENDEDOR',7698,'20/02/2007',
                        1500,390,30);
INSERT INTO EMPLE VALUES (7521,'SALA','VENDEDOR',7698,'22/02/2008',
                        1625,650,30);
INSERT INTO EMPLE VALUES (7566,'JIMENEZ','DIRECTOR',7839,'02/04/2008',
                        2900,NULL,20);
INSERT INTO EMPLE VALUES (7654,'MARTIN','VENDEDOR',7698,'29/09/2008',
                        1600,1020,30);
INSERT INTO EMPLE VALUES (7698,'NEGRO','DIRECTOR',7839,'01/05/2008',
                        3005,NULL,30);
INSERT INTO EMPLE VALUES (7782,'CEREZO','DIRECTOR',7839,'09/06/2005',
                        2885,NULL,10);
INSERT INTO EMPLE VALUES (7788,'GIL','ANALISTA',7566,'09/11/2007',
                        3000,NULL,20);
INSERT INTO EMPLE VALUES (7839,'REY','PRESIDENTE',NULL,'17/11/2007',
                        4100,NULL,10);
INSERT INTO EMPLE VALUES (7844,'TOVAR','VENDEDOR',7698,'08/09/2007',
                        1350,0,30);
INSERT INTO EMPLE VALUES (7876,'ALONSO','EMPLEADO',7788,'23/09/2008',
                        1430,NULL,20);
INSERT INTO EMPLE VALUES (7900,'JIMENO','EMPLEADO',7698,'03/12/2008',
                        1335,NULL,30);
INSERT INTO EMPLE VALUES (7902,'FERNANDEZ','ANALISTA',7566,'03/12/2007',
                        3000,NULL,20);
INSERT INTO EMPLE VALUES (7934,'MUNNOZ','EMPLEADO',7782,'23/01/2009',
                        1690,NULL,10);
 
COMMIT;

--1. Apellido, salario y localidad donde trabajan los empleados que trabajan en el departamento de CONTABILIDAD.

--CON JOIN
SELECT APELLIDO, SALARIO, LOC --NO ESPECIFICO LA TABLA DE LA QUE PROCEDEN YA QUE SUS COLUMNAS SON ÚNICAS
FROM  EMPLE  E
JOIN   DEPART D ON E.DEPT_NO = D.DEPT_NO
WHERE UPPER(D.DNOMBRE)IN (UPPER('CONTABILIDAD'));

--CON USING
SELECT APELLIDO, SALARIO, LOC --NO ESPECIFICO LA TABLA DE LA QUE PROCEDEN YA QUE SUS COLUMNAS SON ÚNICAS
FROM  EMPLE  E
JOIN DEPART D
USING (DEPT_NO)---AQUI SE ESCRIBE EL NEXO DE UNION ENTRE TABLAS, CP Y FK
WHERE UPPER(D.DNOMBRE)IN (UPPER('CONTABILIDAD'));

--SIN JOIN 
SELECT APELLIDO, SALARIO, LOC 
FROM  EMPLE  E , DEPART D
WHERE E.DEPT_NO = D.DEPT_NO 
AND UPPER(D.DNOMBRE)IN (UPPER('CONTABILIDAD'));



--2. Apellido, salario y nombre del departamento de los empleados que trabajan en departamentos que no están en SEVILLA.

--CON JOIN 
SELECT APELLIDO, SALARIO, DNOMBRE
FROM EMPLE
JOIN DEPART ON EMPLE.DEPT_NO = DEPART.DEPT_NO
WHERE UPPER(LOC) != UPPER('SEVILLA');

--CON USING 
SELECT APELLIDO, SALARIO, DNOMBRE
FROM EMPLE 
JOIN DEPART
USING (DEPT_NO)
WHERE UPPER(LOC) <> UPPER('SEVILLA');

--NATURAL JOIN
--RECUERDA QUE PARA UTILIZAR NATURA JOIN, LAS CLAVES PRIMARIAS Y FK QUE UNEN DOS TRABLAS DEBEN LLAMARSE = EN AMBAS TABLAS.
SELECT APELLIDO, SALARIO, DNOMBRE
FROM EMPLE
NATURAL JOIN DEPART
WHERE UPPER(LOC) NOT IN( UPPER('SEVILLA'));

--SIN JOIN 
SELECT APELLIDO, SALARIO, DNOMBRE
FROM EMPLE, DEPART
WHERE EMPLE.DEPT_NO = DEPART.DEPT_NO AND  UPPER(LOC) NOT LIKE( UPPER('%SEVILLA%'));



--3. Número de empleado y nombre del departamento en el que trabajan los empleados que ganan más de 1500 ordenados por departamento y luego por salario.

--CON JOIN 
SELECT  E.EMP_NO, D.DNOMBRE, E.SALARIO
FROM EMPLE E
JOIN DEPART D ON E.DEPT_NO = D.DEPT_NO
WHERE E.SALARIO > 1500
ORDER BY D.DEPT_NO, E.SALARIO ;

--SIN JOIN
SELECT EMP_NO, DNOMBRE, SALARIO
FROM EMPLE E , DEPART D
WHERE E.DEPT_NO = D.DEPT_NO AND E.SALARIO > 1500
ORDER BY D.DEPT_NO, E.SALARIO;



--Tablas Alumnos, Asignaturas, Notas
--TABLA ALUMNOS, NOTAS Y ASIGNATURAS



REM ******** TABLAS ALUMNOS, ASIGNATURAS, NOTAS: ***********
 
DROP TABLE ALUMNOS cascade constraints;
 
CREATE TABLE ALUMNOS
(
  DNI VARCHAR2(10) PRIMARY KEY,
  APENOM VARCHAR2(30),
  DIREC VARCHAR2(30),
  POBLA  VARCHAR2(15),
  TELEF  VARCHAR2(10)  
) ;
 
DROP TABLE ASIGNATURAS cascade constraints;
 
CREATE TABLE ASIGNATURAS
(
  COD NUMBER(2) PRIMARY KEY,
  NOMBRE VARCHAR2(25)
) ;
 
DROP TABLE NOTAS cascade constraints;
 
CREATE TABLE NOTAS
(
  DNI VARCHAR2(10) NOT NULL,
  COD NUMBER(2) NOT NULL,
  NOTA NUMBER(2),
  PRIMARY KEY(DNI,COD),
  FOREIGN KEY (DNI) REFERENCES ALUMNOS(DNI),
  FOREIGN KEY (COD) REFERENCES ASIGNATURAS(COD)
) ;
 
INSERT INTO ASIGNATURAS VALUES (1,'Programacion');
INSERT INTO ASIGNATURAS VALUES (2,'BBDD');
INSERT INTO ASIGNATURAS VALUES (3,'Marcas');
INSERT INTO ASIGNATURAS VALUES (4,'Sistemas');
 
 
 
INSERT INTO ALUMNOS VALUES
('12344345','Alcalde Garcia, Elena', 'C/Las Matas, 24','Madrid','917766545');
 
INSERT INTO ALUMNOS VALUES
('4448242','Cerrato Vela, Luis', 'C/Mina 28 - 3A', 'Madrid','916566545');
 
INSERT INTO ALUMNOS VALUES
('56882942','Diaz Fernandez, Maria', 'C/Luis Vives 25', 'Mostoles','915577545');
 
INSERT INTO ALUMNOS VALUES
('2112212','Sanz Martin, Roberto', 'C/Espronceda 89', 'Madrid','914431211');
 
INSERT INTO NOTAS VALUES('12344345', 1,6);
INSERT INTO NOTAS VALUES('12344345', 2,5);
INSERT INTO NOTAS VALUES('12344345', 3,6);
INSERT INTO NOTAS VALUES('12344345', 4,6);
 
INSERT INTO NOTAS VALUES('4448242', 1,6);
INSERT INTO NOTAS VALUES('4448242', 2,8);
INSERT INTO NOTAS VALUES('4448242', 3,4);
INSERT INTO NOTAS VALUES('4448242', 4,5);
 
INSERT INTO NOTAS VALUES('56882942', 1,8);
INSERT INTO NOTAS VALUES('56882942', 2,7);
INSERT INTO NOTAS VALUES('56882942', 3,8);
INSERT INTO NOTAS VALUES('56882942', 4,9);
 
INSERT INTO NOTAS VALUES('2112212', 1,3);
INSERT INTO NOTAS VALUES('2112212', 2,3);
INSERT INTO NOTAS VALUES('2112212', 3,2);
INSERT INTO NOTAS VALUES('2112212', 4,6);
COMMIT;
 
REM ******** FIN ***********************


--4. Mostrar nombre, dni, población y nombre de la asignatura de los alumnos que han suspendido alguna asignatura junto con dicha asignatura y la nota obtenida.

--CON JOIN 
SELECT AL.APENOM, AL.DNI, AL.POBLA, ASI.NOMBRE, N.NOTA
FROM ALUMNOS AL
JOIN NOTAS N ON AL.DNI = N.DNI
JOIN ASIGNATURAS ASI ON ASI.COD = N.COD
WHERE N.NOTA < 5; 




--5. Mostrar el nombre y código de las asignaturas que han tenido notas de 7 o 8

--CON JOIN 
SELECT DISTINCT  ASI.COD, ASI.NOMBRE 
FROM ASIGNATURAS ASI
JOIN NOTAS N ON N.COD = ASI.COD
WHERE N.NOTA BETWEEN 7 AND 8; 

--CON USING **************DA FALLO PREGUNTAR A ANA PORQUE*******
SELECT DISTINCT ASI.COD, ASI.NOMBRE
FROM ASIGNATURAS ASI
JOIN NOTAS N  USING (COD)
WHERE N.NOTA BETWEEN 7 AND 8; 

--EN LOS UPPER DE LOS LIKE O LOS IN, SON INCESARIOS SIEMPRE Y CUANDO LOS PONGAS EN MAYUCULAS,
--DONDE SI ES NECESARIO PONERLO ES ANTES DEL NOMBRE DE LA COLUMNA

--6. Visualizar los nombres de alumnos que tengan una nota entre 6 y 8 en la asignatura de BBDD.

--CON JOIN 
SELECT AL.APENOM, N.NOTA, ASI.NOMBRE
FROM ALUMNOS AL
JOIN NOTAS N ON AL.DNI = N.DNI
JOIN ASIGNATURAS ASI ON ASI.COD = N.COD
WHERE N.NOTA BETWEEN 6 AND 8 AND UPPER(ASI.NOMBRE) LIKE(UPPER('%BBDD%')); --ES DECIR, EL SEGUNDO UPPER NO ES NECESARIO, SI BBDD ESTA EN MAYUSCULAS.

--SIN JOIN 
SELECT AL.APENOM, N.NOTA, ASI.NOMBRE
FROM ALUMNOS AL, NOTAS N, ASIGNATURAS ASI
WHERE AL.DNI = N.DNI
AND ASI.COD = N.COD 
AND N.NOTA BETWEEN 6 AND 8 
AND UPPER(ASI.NOMBRE) IN (UPPER('BBDD'))

--7. Visualizar los nombres (sin repetir) de alumnos de “Madrid” que tienen suspensos.

--CON JOIN 
SELECT DISTINCT AL.APENOM, AL.POBLA
FROM ALUMNOS AL
JOIN NOTAS N ON AL.DNI = N.DNI
WHERE N.NOTA < 5 AND UPPER(AL.POBLA) IN (UPPER('MADRID')); 

--CON USING 
SELECT DISTINCT AL.APENOM, AL.POBLA
FROM ALUMNOS AL
JOIN NOTAS N USING (DNI)
WHERE N.NOTA < 5 AND UPPER(AL.POBLA) = (UPPER('MADRID'));

--CON NATURAL JOIN
SELECT DISTINCT AL.APENOM, AL.POBLA
FROM ALUMNOS AL
NATURAL JOIN NOTAS N 
WHERE N.NOTA < 5 AND UPPER(AL.POBLA) LIKE (UPPER('%MADRID%'));


--8. Mostrar ordenados alfabéticamente a los alumnos junto al nombre de las asignaturas que tienen aprobadas

--EN ESTE EJEMPLO VEMOS QUE DA IGUAL QUE TABLA PONES EN EL FROM Y CUAL EN EL JOIN, LOS RESULTADOS FUNCIONAN IGUALMENTE
--LO IMPORTANTE ES SABER IDETIFICAR CUANDO DOS TABLAS NO ESTAN UNIDAS DIRECTAMENTE, SINO POR OTRA TABLA INTERMEDIA, E INCLUIRLA EN EL JOIN CON SU 
--CLAVE DE UNIÓN

SELECT AL.APENOM, ASI.NOMBRE, N.NOTA 
FROM ASIGNATURAS ASI
JOIN NOTAS N ON N.COD = ASI.COD
JOIN ALUMNOS AL ON AL.DNI = N.DNI
WHERE N.NOTA >= 5
ORDER BY AL.APENOM, ASI.NOMBRE;



--TABLAS PARQUE DE ATRACCIONES

--************* TABLAS ATRACCIONES***********************************************************************
            

drop table averias_parque ;
drop table atracciones ;
drop table zonas ;
drop table emple_parque ;
 
 
 
 create table emple_parque
 (dni_emple varchar2(9) primary key,
 Nom_Empleado varchar2(30) NOT NULL,
 Alta_empresa date  not null );
   
insert into emple_parque values
('6664321M','Ignacio Penna','12/10/2008');
insert into emple_parque values
('3455344J','Luis Perez','10/05/2008');
insert into emple_parque values
('23552335I','Alvaro Marton','19/05/2009');
insert into emple_parque values
('11111111I','Ana Gil','19/05/2009');
insert into emple_parque values
('33333333I','Chus Sabio','10/05/2008');
 
 
create table ZONAS
(Nom_Zona varchar2(30) primary key,
 Dni_Encargado varchar2(9) references emple_parque(dni_emple),
 Presupuesto number(10,2));
 
insert into Zonas values
('Infantil','3455344J',40000);
insert into Zonas values
('Agua','33333333I',50000);
insert into Zonas values
('Gran Maquinaria','33333333I',12006);
insert into Zonas values
('Familiares','3455344J',21000);
 
 
 
 create table atracciones
 (Cod_Atraccion char(4) primary key,  
  Nom_Atraccion varchar2(30) ,
  Fec_Inauguracion date,
  Capacidad number ,
  Nom_Zona varchar2(30) references zonas);
 
insert into atracciones values
('A100','Los Vikingos','01/05/2006',90,'Infantil');
insert into atracciones values
('A110','Lejano Oeste','01/09/2006',80,'Infantil');
insert into atracciones values
('A120','Tio Vivo','01/05/2006',120,'Infantil');
insert into atracciones values
('A130','La Peque Montana','01/09/2006',60,'Infantil');
insert into atracciones values
('B100','Los Rapidos','01/05/2006',40,'Agua');
insert into atracciones values
('B110','Cataratas Locas','01/09/2006',40,'Agua');
insert into atracciones values
('C100','Dragon Chiflado','01/05/2007',100, 'Gran Maquinaria');
insert into atracciones values
('C110','Enterprise', '01/09/2007',90,'Gran Maquinaria');
insert into atracciones values
('C120','Los 7 Picos','01/05/2007', 110,'Gran Maquinaria');
insert into atracciones values
('C130','Montanna Rusa','01/05/2006',80, 'Gran Maquinaria');
insert into atracciones values
('C200','La Noria', '01/05/2006',40,'Familiares');
insert into atracciones values
('C210','El Ferrocarril', '01/05/2006',60,'Familiares');
insert into atracciones values
('C220','Tunel Terrorifico', '01/05/2006',70,'Familiares');
 
 
 create table averias_parque
 (Cod_Atraccion char(4),
 Fecha_Falla date,
 Fecha_Arreglo date,
 Coste_Averia number(10,2),
 dni_emple varchar2(9) references emple_parque,
 primary key(Cod_atraccion,fecha_falla),
 foreign key (Cod_atraccion) references atracciones);
 
alter session set nls_date_format = 'dd/mm/yyyy hh24:mi';
insert into averias_parque values
('A100','10/07/2013 16:30','17/09/2013 17:45',300,'6664321M');
insert into averias_parque values
('A120','17/12/2013 18:30','22/02/2014 10:30',1600,'3455344J');
insert into averias_parque values
('B110','15/08/2013 18:30','16/08/2013 18:30',9000,'3455344J');
insert into averias_parque values
('B110','10/07/2014 16:30','18/07/2014 12:00',300,'6664321M');
insert into averias_parque values
('A110','15/06/2014 16:35','17/06/2014 12:45',5000,'6664321M');
insert into averias_parque values
('C120','12/03/2014 13:30','16/03/2014 11:30',7000,'3455344J');
insert into averias_parque values
('A100','15/05/2014 13:30','15/05/2014 13:30',400,'33333333I');
insert into averias_parque values
('C100','15/08/2014 13:30',null,null,'33333333I');
insert into averias_parque values
('B110','03/09/2014 18:30',null,null,'3455344J');
 
  
 
COMMIT;

--*************************MAYOR DIFICULTAD****************************************************

--9. Mostrar el nombre de las atracciones que están actualmente averiadas

--CON JOIN 
SELECT AT.NOM_ATRACCION 
FROM ATRACCIONES AT
JOIN AVERIAS_PARQUE AVE ON AT.COD_ATRACCION = AVE.COD_ATRACCION
WHERE FECHA_FALLA IS NOT NULL AND FECHA_ARREGLO IS NULL; 

--CON EXIST (ES UNA SUBCONSULTA, SIEMPRE QUE SEA POSIBLE ES MEJOR HACERLO CON JOIN)
--UTILIZAMOS EXIST PARA SABER SI LA ATRACCION HA TENIDO ALGUNA AVERIA Y SI ES ASI, COMPROBAMOS ENTONCES QUE NO HAYA SIDO ARREGLADO
SELECT AT.NOM_ATRACCION 
FROM ATRACCIONES AT
WHERE EXISTS (SELECT AT.COD_ATRACCION
                FROM AVERIAS_PARQUE AVE
                WHERE AT.COD_ATRACCION = AVE.COD_ATRACCION
                AND AVE.FECHA_ARREGLO IS NULL)


--10. Mostrar el nombre del empleado que tiene que arreglar las atracciones que están actualmente averiadas.


SELECT EMP.NOM_EMPLEADO, AT.NOM_ATRACCION
FROM EMPLE_PARQUE EMP
JOIN AVERIAS_PARQUE AVE ON AVE.DNI_EMPLE = EMP.DNI_EMPLE
JOIN ATRACCIONES AT ON AT.COD_ATRACCION = AVE.COD_ATRACCION
WHERE AVE.FECHA_FALLA IS NOT NULL AND AVE.FECHA_ARREGLO IS NULL; 


--11. Mostrar los datos de las zonas junto a los nombres de los empleados que son sus encargados ordenados del más antiguo al más nuevo.
--ESTE EJERCICIO TIENE DE PARTICULAR QUE LA CLAVE DE UNION ENTRE LA TABLA ZONA Y EMPLE_PARQUE, SON DENOMINADA DE DISTINTA MANERA, EN UNA ES DNI_EMPLEADO
--Y EN LA OTRA TABLA ES DNI_ENCARGADO, PERO SIN EMBARGO ES LA MISMA CLAVE

-- ESTA CONSULTA NO SE PODRIA RESOLVER CON NATURAL JOIN YA QUE LA CP DNI_EMPLE NO SE LLAMA IGUAL EN AMBAS TABLAS, EN UNA ES DNI_EMPLE Y EN OTRA ES DNI_ENCARGADA.

--CON JOIN 
SELECT Z.*, EMP.NOM_EMPLEADO,EMP.DNI_EMPLE,  EMP.ALTA_EMPRESA
FROM ZONAS Z
JOIN EMPLE_PARQUE EMP ON EMP.DNI_EMPLE = Z.DNI_ENCARGADO
ORDER BY EMP.ALTA_EMPRESA ASC; --LAS FECHAS DE LA MAS ANTIGUA A LA MAS ACTUAL ES CON ASC U OMITIRLO, SI QUEREMOS IR DE LA ACTUALIDAD AL PASADO ENTONCES ES DESC

--SIN JOIN 
SELECT Z.*, EMP.NOM_EMPLEADO,EMP.DNI_EMPLE, EMP.ALTA_EMPRESA
FROM ZONAS Z, EMPLE_PARQUE EMP
WHERE EMP.DNI_EMPLE = Z.DNI_ENCARGADO
ORDER BY EMP.ALTA_EMPRESA ASC;

--12. Para las averías que ocurrieron en el año 2013, mostrar el nombre de los empleados que las arreglaron, el nombre de la atracción a la que corresponden y el
--presupuesto de la zona a la que pertenecen.

SELECT EMP.NOM_EMPLEADO, AT.NOM_ATRACCION, Z.PRESUPUESTO, AVE.FECHA_FALLA
FROM AVERIAS_PARQUE AVE --LA TABLA AVERIAS SOLO CONTIENE COD_ATRACION Y DNI_EMPLE, PERO CON ZONAS NO TIENE UNA UNION DIRECTA
JOIN EMPLE_PARQUE EMP ON  EMP.DNI_EMPLE = AVE.DNI_EMPLE       
JOIN ATRACCIONES AT ON AT.COD_ATRACCION = AVE.COD_ATRACCION
JOIN ZONAS Z ON Z.NOM_ZONA =  AT.NOM_ZONA -- PERO ZONAS SI ESTA UNIDO A LA TABLA EMPLEADO Y ATRACCIONES, ENTONCES VAMOS A HACER EL JOIN CON UNA TABLA QUE ESTA EN OTRO JOIN.
WHERE TO_CHAR(FECHA_FALLA, 'YYYY') = 2013;


--13. Mostrar el dni del empleado que tiene que arreglar las atracciones actualmente averiadas junto al nombre de la atracción, el nombre de la zona de la atracción y el
--dni del encargado de la zona.

SELECT EMP.DNI_EMPLE, AT.NOM_ATRACCION, Z.NOM_ZONA, Z.DNI_ENCARGADO
FROM AVERIAS_PARQUE AVE
JOIN EMPLE_PARQUE EMP ON EMP.DNI_EMPLE = AVE.DNI_EMPLE
JOIN ATRACCIONES AT ON AT.COD_ATRACCION = AVE.COD_ATRACCION
JOIN ZONAS Z ON Z.NOM_ZONA = AT.NOM_ZONA --UNION INDIRECTA A OTRO JOIN
WHERE FECHA_ARREGLO IS NULL; 



--14. Añadir a la consulta anterior que se muestre también el nombre del encargado de la zona.

SELECT EMP.DNI_EMPLE, AT.NOM_ATRACCION, Z.NOM_ZONA, Z.DNI_ENCARGADO, ENCARGADO.NOM_EMPLEADO, ARREGLA.NOM_EMPLEADO
FROM AVERIAS_PARQUE AVE
JOIN ATRACCIONES AT ON AT.COD_ATRACCION = AVE.COD_ATRACCION
JOIN ZONAS Z ON Z.NOM_ZONA = AT.NOM_ZONA --UNION INDIRECTA A OTRO JOIN
JOIN EMPLE_PARQUE ENCARGADO ON ENCARGADO.DNI_EMPLE = Z.DNI_ENCARGADO --SALE EL NOMBRE DEL ENCARGADO DE LA ZONA, NO EL QUE ARREGLA LA AVERIA
WHERE FECHA_ARREGLO IS NULL; 

--CORREGIDA 
SELECT AV.DNI_EMPLE, NOM_ATRACCION, Z.NOM_ZONA, DNI_ENCARGADO, NOM_EMPLEADO
FROM AVERIAS_PARQUE AV JOIN ATRACCIONES A ON AV.COD_ATRACCION = A.COD_ATRACCION
JOIN ZONAS Z ON A.NOM_ZONA=Z.NOM_ZONA
JOIN EMPLE_PARQUE E ON E.DNI_EMPLE=Z.DNI_ENCARGADO
WHERE FECHA_ARREGLO IS NULL;



--15. Añadir a la anterior que se muestre también el nombre del empleado que tiene que arreglar la avería.

--LA DIFICULTA ES QUE NOM_EMPLEADO SE NECESITA DOS VECES, PARA EL ENCARGADO DE DE LA ZONA Y AHORA ES PARA EL 
--QUE TIENE QUE ARREGLA LA AVERIA

SELECT AV.DNI_EMPLE, NOM_ATRACCION, Z.NOM_ZONA, DNI_ENCARGADO, 
E1.NOM_EMPLEADO "ENCARGADO ZONA", E2.NOM_EMPLEADO "EMPLEADO AVERÍA" 
FROM AVERIAS_PARQUE AV JOIN ATRACCIONES A ON AV.COD_ATRACCION = A.COD_ATRACCION
JOIN ZONAS Z ON A.NOM_ZONA=Z.NOM_ZONA
JOIN EMPLE_PARQUE E1 ON E1.DNI_EMPLE=Z.DNI_ENCARGADO
JOIN EMPLE_PARQUE E2 ON E2.DNI_EMPLE=AV.DNI_EMPLE
WHERE FECHA_ARREGLO IS NULL;


--16. Mostrar las zonas en las que Luis Pérez ha realizado arreglos.

SELECT Z.NOM_ZONA
FROM ZONAS Z
JOIN EMPLE_PARQUE EMP ON EMP.DNI_EMPLE = Z.DNI_ENCARGADO
WHERE UPPER(EMP.NOM_EMPLEADO) = UPPER('LUIS PEREZ');


--17. Mostrar el nombre de las atracciones que han arreglado Luis o Ignacio

--NO VALIDO, DEJO COMO EJEMPLO DE QUE NO SE PUEDE HACER ASI
SELECT AT.NOM_ATRACCION
FROM AVERIAS_PARQUE AVE
JOIN ATRACCIONES AT ON AT.COD_ATRACCION = AVE.COD_ATRACCION
JOIN EMPLE_PARQUE EMP ON EMP.DNI_EMPLE = AVE.DNI_EMPLE
WHERE UPPER(EMP.NOM_EMPLEADO) LIKE (UPPER('%LUIS%' OR '%IGNACIO%'));--ESTE FORMATO NO ES VALIDO

--FORMATO VALIDO
SELECT AT.NOM_ATRACCION
FROM AVERIAS_PARQUE AVE
JOIN ATRACCIONES AT ON AT.COD_ATRACCION = AVE.COD_ATRACCION
JOIN EMPLE_PARQUE EMP ON EMP.DNI_EMPLE = AVE.DNI_EMPLE
WHERE UPPER(EMP.NOM_EMPLEADO) LIKE UPPER('%LUIS%') OR UPPER(EMP.NOM_EMPLEADO) LIKE UPPER('%IGNACIO%');


--18. Mostrar las atracciones que ha arreglado el encargado de la zona a la que pertenece la atracción 

--ESTE NO ME SALE, PREGUNTAR EN CLASE
SELECT AT.NOM_ATRACCION, Z.DNI_ENCARGADO, EMP.DNI_EMPLE 
FROM AVERIAS_PARQUE AVE
JOIN EMPLE_PARQUE EMP ON EMP.DNI_EMPLE = AVE.DNI_EMPLE
JOIN ZONAS Z ON Z.DNI_ENCARGADO = AVE.DNI_EMPLE --HACEMOS JOIN CON EL JOIN DE LA TABLA EMPLE
JOIN ATRACCIONES AT ON AT.COD_ATRACCION = AVE.COD_ATRACCION
WHERE Z.DNI_ENCARGADO = EMP.DNI_EMPLE  --EL FILTRO CONSISTA EN QUE EL ENCARGADO DE CADA ARREGLO POR ZONA SEA EL MISMO QUE LO ARREGLA

SELECT AT.NOM_ATRACCION
FROM AVERIAS_PARQUE AVE
JOIN EMPLE_PARQUE EMP_ARREGLO ON EMP_ARREGLO.DNI_EMPLE = AVE.DNI_EMPLE -- Empleado que arregló la atracción
JOIN ZONAS Z ON Z.COD_ZONA = AT.NOM_ZONA -- Relacionamos con la zona de la atracción
JOIN EMPLE_PARQUE ENCARGADO ON ENCARGADO.DNI_ENCARGADO = Z.DNI_ENCARGADO -- Encargado de la zona
JOIN ATRACCIONES AT ON AT.COD_ATRACCION = AVE.COD_ATRACCION
WHERE ENCARGADO.DNI_EMPLE = EMP_ARREGLO.DNI_EMPLE;







